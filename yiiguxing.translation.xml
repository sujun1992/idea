<application>
  <component name="AppStorage">
    <histories>
      <item value="convert" />
      <item value="conver" />
      <item value="if this node is not a array value" />
      <item value="Get this node as list" />
      <item value="Get the field names of this node (i.e. the property names)" />
      <item value="Creates a JsonPath query on this element" />
      <item value="Fetches the node from the result of JsonPath" />
      <item value="if the subtree rooted at this node is a method invocation" />
      <item value="transient" />
      <item value="wrap" />
      <item value="Wrap the given {@code byte} array in a {@code DataBuffer}. Unlike * {@linkplain #allocateBuffer(int) allocating}, wrapping does not use new memory." />
      <item value="his method should be automatically invoked at the end of message * processing so typically applications should not have to invoke it. * If invoked multiple times it should have no side effects." />
      <item value="Indicate that message handling is complete, allowing for any cleanup or * end-of-processing tasks to be performed such as applying header changes * made via {@link #getHeaders()} to the underlying HTTP message (if not * applied already)." />
      <item value="Use the given {@link Publisher} of {@code Publishers} to write the body * of the HttpOutputMessage to the underlying HTTP layer, flushing after * each {@code Publisher&lt;DataBuffer&gt;}." />
      <item value="Contract for specifying request headers leading up to the exchange" />
      <item value="WebHandler that delegates to a chain of {@link GlobalFilter} instances and * {@link GatewayFilterFactory} instances then to the target {@link WebHandler}." />
      <item value="ets the port of the management server, use {@code null} if the * {@link ServerProperties#getPort() server port} should be used. To disable use 0." />
      <item value="that can be used to create the body" />
      <item value="Whether this status code is in the HTTP series" />
      <item value="Public constant media type for {@code application/json;charset=UTF-8}." />
      <item value="Subscribe to this {@link Mono} and &lt;strong&gt;block indefinitely&lt;/strong&gt; until a next signal is * received. Returns that value, or null if the Mono completes empty. In case the Mono * errors, the original exception is thrown (wrapped in a {@link RuntimeException} if * it was a checked exception)." />
      <item value="Note that each block() will trigger a new subscription: in other words, the result * might miss signal from hot publishers." />
      <item value="notify" />
      <item value="Subscribe to this {@link Mono} and &lt;strong&gt;block indefinitely&lt;/strong&gt; until a next signal is * received. Returns that value, or null if the Mono completes empty. In case the Mono * errors, the original exception is thrown (wrapped in a {@link RuntimeException} if * it was a checked exception). * * &lt;p&gt; * &lt;img class=&quot;marble&quot; src=&quot;doc-files/marbles/block.svg&quot; alt=&quot;&quot;&gt; * &lt;p&gt; * Note that each block() will trigger a new subscription: in other words, the result * might miss signal from hot publishers." />
      <item value="Keep in mind that since the sequence can be asynchronous, this will immediately * return control to the calling thread. This can give the impression the consumer is * not invoked when executing in a main thread or a unit test for instance." />
      <item value="Cancel or dispose the underlying task or resource." />
      <item value="Perform the HTTP request and return a {@link ClientResponse} with the * response status and headers. You can then use methods of the response * to consume the body:" />
      <item value="Provides access to every attribute declared so far with the * possibility to add, replace, or remove values." />
      <item value="retrieve" />
      <item value="Provides access to every header declared so far with the possibility * to add, replace, or remove values." />
      <item value="capacity" />
      <item value="reverse" />
      <item value="regex to split by comma which does a positive look ahead to ignore commas enclosed in quotes" />
      <item value="List Transformer" />
      <item value="Defines property resolution behavior on objects using the JavaBeans component architecture. This * resolver handles base objects of any type, as long as the base is not null. It accepts any object * as a property, and coerces it to a string. That string is then used to find a JavaBeans compliant * property on the base object. The value is accessed using JavaBeans getters and setters. This * resolver can be constructed in read-only mode, which means that isReadOnly will always return * true and {@link #setValue(ELContext, Object, Object, Object)} will always throw * PropertyNotWritableException. ELResolvers are combined together using {@link CompositeELResolver} * s, to define rich semantics for evaluating an expression. See the javadocs for {@link ELResolver} * for details. Because this resolver handles base objects of any type, it should be placed near the * end of a composite resolver. Otherwise, it will claim to have resolved a property before any * resolvers that come after it get a chance to test if they can do so as well." />
      <item value="A script which is provided as source code" />
      <item value="evaluate" />
      <item value="ScriptEngine that used JUEL for script evaluation and compilation (JSR-223)." />
      <item value="Bindings implementation using an {@link ExecutionImpl} as 'back-end'" />
      <item value="Returns a cached script engine or creates a new script engine if no such engine is currently cached" />
      <item value="Primitive Value" />
      <item value="decrypt" />
      <item value="Static factory methods for {@link BodyInserter} implementations." />
      <item value="A function that can extract data from a {@link ReactiveHttpInputMessage} body." />
      <item value="A combination of functions that can populate a {@link ReactiveHttpOutputMessage} body." />
      <item value="@deprecated {@code SSLSocketFactory} does not expose its {@link X509TrustManager}, which is * a field that OkHttp needs to build a clean certificate chain. This method instead must * use reflection to extract the trust manager. Applications should prefer to call {@link * #sslSocketFactory(SSLSocketFactory, X509TrustManager)}, which avoids such reflection." />
      <item value="Public constant media type for" />
      <item value="GatewayFilter that modifies the request body" />
      <item value="This filter blocks the request, if the request size is more than the permissible size. * The default request size is 5 MB." />
      <item value="PAYMENT REQUIRED" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="410" />
        <entry key="ENGLISH" value="411" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>