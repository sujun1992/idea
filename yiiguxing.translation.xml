<application>
  <component name="AppStorage">
    <histories>
      <item value="Conditional" />
      <item value="that will match when none of the nested class conditions match. Can * be used to create composite conditions" />
      <item value="Not Reactive Web Application Condition" />
      <item value="because NoneNestedConditions 1 matched 0 did not" />
      <item value="not loaded because NoneNestedConditions 1 matched 0 did not" />
      <item value="The following candidates were found but could not be injected" />
      <item value="Parameter 0 of method enableAuthorizationCheckGatewayFilterFactory in com.ai.ocp.config.OcpAutoConfiguration required a bean of type 'org.springframework.boot.web.client.RestTemplateBuilder' that could not be found" />
      <item value="None Nested Conditions" />
      <item value="expected at least 1 bean which qualifies as autowire candidate. Dependency annotations" />
      <item value="qualifying" />
      <item value="Configuration Service" />
      <item value="Whether to dispatch TRACE requests to the FrameworkServlet doService method" />
      <item value="dispatch Trace Request" />
      <item value="Locate a value editor for a given target type" />
      <item value="If the base object is not null, returns an Iterator containing the set of JavaBeans * properties available on the given object. Otherwise, returns null. The Iterator returned must * contain zero or more instances of java.beans.FeatureDescriptor. Each info object contains * information about a property in the bean, as obtained by calling the * BeanInfo.getPropertyDescriptors method. The FeatureDescriptor is initialized using the same * fields as are present in the PropertyDescriptor, with the additional required named * attributes &quot;type&quot; and &quot;resolvableAtDesignTime&quot; set as follows" />
      <item value="reverse" />
      <item value="Error while fetching metadata with correlation id" />
      <item value="do not continue listener invocation once a listener has failed" />
      <item value="Transition Impl" />
      <item value="Controls events of execution listener" />
      <item value="Controls events of task listener" />
      <item value="configuration" />
      <item value="Create an incident associated with this execution" />
      <item value="Returns an equivalent stream that is parallel. May return * itself, either because the stream was already parallel, or because * the underlying stream state was modified to be parallel." />
      <item value="Incident Entity" />
      <item value="get Revision Next" />
      <item value="Called when an execution is interrupted. This will remove all associated entities * such as event subscriptions, jobs, ..." />
      <item value="interrupt" />
      <item value="fire Historic Process Start Event" />
      <item value="inactivate" />
      <item value="remove all event subscriptions for this scope, if the scope has event // subscriptions" />
      <item value="removes jobs, incidents and tasks, and // clears the variable store" />
      <item value="Method used for destroying a scope in a way that the execution can be * removed afterwards" />
      <item value="indicates if this execution represents an active path of execution. * Executions are made inactive in the following situations:" />
      <item value="teapot" />
      <item value="Request Timeout" />
      <item value="Proxy Authentication Required" />
      <item value="Acceptable" />
      <item value="Note that the boundary events are not parsed during the parsing of the bpmn * activities, since the semantics are different (boundaryEvent needs to be * added as nested activity to the reference activity on PVM level)." />
      <item value="parse Boundary Events" />
      <item value="grade" />
      <item value="Indicates whether this timer is interrupting" />
      <item value="Parses a boundary timer event. The end-result will be that the given nested * activity will get the appropriate" />
      <item value="interrupting" />
      <item value="is Interrupting Timer" />
      <item value="Thorben Lindhauer" />
      <item value="Tries to evaluate the condition. If the property which is used in the condition does not exist * false will be returned." />
      <item value="hierarchy" />
      <item value="Optimistic Locking Exception" />
      <item value="create Timer Instances" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="679" />
        <entry key="ENGLISH" value="680" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="2" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>