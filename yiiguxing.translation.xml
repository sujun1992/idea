<application>
  <component name="AppStorage">
    <histories>
      <item value="Principal associated with an HTTP request-response exchange" />
      <item value="time Taken" />
      <item value="Flag to say that the repository lists traces in reverse order" />
      <item value="Trace" />
      <item value="In Memory Http Trace Repository" />
      <item value="Convert the Map to JSON" />
      <item value="decode" />
      <item value="signer for signing using an RSA private key" />
      <item value="Utility that generates a random-value ASCII string." />
      <item value="Helper that translates between JWT encoded token values and OAuth authentication * information (in both directions). Also acts as a {@link TokenEnhancer} when tokens are * granted." />
      <item value="Attempt to run as a different user" />
      <item value="@return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;RunAsManager&lt;/code&gt; can support the passed * configuration attribute" />
      <item value="Attempt authorization" />
      <item value="Indicates whether this &lt;code&gt;RunAsManager&lt;/code&gt; is able to process the passed * &lt;code&gt;ConfigAttribute&lt;/code&gt;. * &lt;p&gt; * This allows the &lt;code&gt;AbstractSecurityInterceptor&lt;/code&gt; to check every * configuration attribute can be consumed by the configured * &lt;code&gt;AccessDecisionManager&lt;/code&gt; and/or &lt;code&gt;RunAsManager&lt;/code&gt; and/or * &lt;code&gt;AfterInvocationManager&lt;/code&gt;. * &lt;/p&gt;" />
      <item value="Allows providing defaults for" />
      <item value="* Provides integration with the Servlet 3 APIs in addition to the ones found in * {@link HttpServlet25RequestFactory}. The additional methods that are integrated with * can be found below:" />
      <item value="Role prefix must not be null" />
      <item value="A &lt;code&gt;Filter&lt;/code&gt; which populates the &lt;code&gt;ServletRequest&lt;/code&gt; with a request * wrapper which implements the servlet API security methods." />
      <item value="Standard implementation of {@code SecurityFilterChain}." />
      <item value="Commences an authentication scheme. * &lt;p&gt; * &lt;code&gt;ExceptionTranslationFilter&lt;/code&gt; will populate the &lt;code&gt;HttpSession&lt;/code&gt; * attribute named * &lt;code&gt;AbstractAuthenticationProcessingFilter.SPRING_SECURITY_SAVED_REQUEST_KEY&lt;/code&gt; * with the requested target URL before calling this method. * &lt;p&gt; * Implementations should modify the headers on the &lt;code&gt;ServletResponse&lt;/code&gt; as * necessary to commence the authentication process." />
      <item value="Used by {@link ExceptionTranslationFilter} to commence an authentication scheme." />
      <item value="Processes a HTTP request's BASIC authorization headers, putting the result into the * &lt;code&gt;SecurityContextHolder&lt;/code&gt;." />
      <item value="If the {@link SecurityConfigurer} has already been specified get the original, * otherwise apply the new {@link SecurityConfigurerAdapter}." />
      <item value="Allows specifying that URLs are secured by an arbitrary expression" />
      <item value="Lazily initializes the global authentication with a {@link UserDetailsService} if it is * not yet configured and there is only a single Bean of that type. Optionally, if a * {@link PasswordEncoder} is defined will wire this up too." />
      <item value="Indicates whether the user is enabled or disabled. A disabled user cannot be * authenticated." />
      <item value="role should not start with 'ROLE_' since it is automatically inserted" />
      <item value="Specify that URLs require a particular authority." />
      <item value="Shortcut for specifying URLs require a particular role. If you do not want to * have &quot;ROLE_&quot; automatically inserted see {@link #hasAuthority(String)}." />
      <item value="Specify that URLs are allowed by users who have authenticated and were not * &quot;remembered&quot;." />
      <item value="Specify that URLs are allowed by users who have authenticated and were not" />
      <item value="Specify that URLs are allowed by any authenticated user." />
      <item value="Specify that URLs are allowed by anyone." />
      <item value="Maps any request" />
      <item value="Specify that URLs are not allowed by anyone." />
      <item value="Specify that URLs are allowed by users that have been remembered." />
      <item value="Specify that URLs are allowed by anonymous users." />
      <item value="gh-807 Approvals (if any) should only be removed when Refresh Tokens are removed (or expired)" />
      <item value="We don't want to accidentally issue a token, and we have no way to reconstruct the refresh token" />
      <item value="// The token store could remove the refresh token when the // access token is removed, but we want to // be sure..." />
      <item value="Creates a new instance using the provided URL as the location for the JWK Set." />
      <item value="A {@link TokenStore} implementation that provides support for verifying the * JSON Web Signature (JWS) for a JSON Web Token (JWT) using a JSON Web Key (JWK)." />
      <item value="807 Approvals (if any) should only be removed when Refresh Tokens are removed (or expired)" />
      <item value="The key used for verifying signatures produced by this class. This is not used but * is returned from the endpoint to allow resource servers to obtain the key." />
      <item value="Signing and verification RSA keys do not match" />
      <item value="Returns the key in its primary encoding format, or null * if this key does not support encoding." />
      <item value="set Verifier Key" />
      <item value="set Signing Key" />
      <item value="Sets the JWT signing key. It can be either a simple MAC key or an RSA key. RSA keys * should be in OpenSSH format, as produced by &lt;tt&gt;ssh-keygen&lt;/tt&gt;." />
      <item value="The key used for verifying signatures produced by this class. This is not used but * is returned from the endpoint to allow resource servers to obtain the key. * * For an HMAC key it will be the same value as the signing key and does not need to * be set. For and RSA key, it should be set to the String representation of the * public key, in a standard format (e.g. OpenSSH keys)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="349" />
        <entry key="ENGLISH" value="350" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>