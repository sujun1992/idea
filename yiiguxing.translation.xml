<application>
  <component name="AppStorage">
    <histories>
      <item value="terminate has no match expression" />
      <item value="terminate has no expression" />
      <item value="当前返回" />
      <item value="returns only alive servers. Each consul agent runs a serf agent which is * a member of the serf gossip pool. The serf status (alive/failed/etc) is reflected in 2 * consul APIs: in the agent API and in the catalog API. We prefer the agent API because * it is most up to date (or perhaps we should intersect them and pick members that are * live in both)" />
      <item value="Properties related to hearbeat verification" />
      <item value="ambiguous" />
      <item value="recognized" />
      <item value="Define a single variable and its name to filter tasks in a topic. Multiple calls to * this method add to the existing &quot;variable filters&quot;." />
      <item value="db Specific Dummy Table" />
      <item value="limit Before Without Offset" />
      <item value="The relative path or absolute URL of a template file for an Angular component. * If provided, do not supply an inline template using `template`." />
      <item value="By default, Reflect polyfills are auto-included by the CLI and" />
      <item value="IE10 and IE11 requires the following for the Reflect API" />
      <item value="set Activity Behavior" />
      <item value="Default way of leaving a BPMN 2.0 activity: evaluate the conditions on the * outgoing sequence flow and take those that evaluate to true." />
      <item value="Put a {@link DbEntityState#MERGED} object into the cache." />
      <item value="merge" />
      <item value="The cache itself: maps entity types (classes) to maps indexed by id (primary key). * * The motivation for indexing by type (class) is * * a) multiple entities of different types could have the same value as primary key. In the * process engine, TaskEntity and HistoricTaskEntity have the same id value." />
      <item value="ut a new, {@link DbEntityState#TRANSIENT} object into the cache." />
      <item value="A simple first level cache for {@link DbEntity Entities}." />
      <item value="is Transient" />
      <item value="lush the entity cache which inserts operations to the db operation manager" />
      <item value="Creates the history event fired when a variable is &lt;strong&gt;created&lt;/strong&gt;." />
      <item value="Migrating Instance" />
      <item value="migrate History" />
      <item value="Decides how to propagate the exception properly, e.g. as bpmn error or &quot;normal&quot; error." />
      <item value="Provides access to the snapshot of latest variables of an execution." />
      <item value="Contains observers which are observe the execution." />
      <item value="persisted reference to the super case execution of this execution" />
      <item value="fire Historic Activity Instance Update" />
      <item value="Dispatches the current delayed variable events and performs the given atomic operation * if the current state was not changed." />
      <item value="efault way of leaving a BPMN 2.0 activity: evaluate the conditions on the * outgoing sequence flow and take those that evaluate to true." />
      <item value="The resulting string may vary depending on the platform's * default encoding. Instead, use the encode(String,String) * method to specify the encoding" />
      <item value="Decrement an integer value stored as string value under {@code key} by one." />
      <item value="decrement" />
      <item value="set If Present" />
      <item value="set If Absent" />
      <item value="delta" />
      <item value="deprecated" />
      <item value="has default methods (made * possible by a Java 8 baseline) and can be implemented directly without the * need for this adapter" />
      <item value="The history level controls what kind of data is logged to the history database. * More formally, it controls which history events are produced by the {@link HistoryEventProducer}.&lt;/p&gt;" />
      <item value="create variable scope for output parameters" />
      <item value="he quote character to be used when writing a CSV file" />
      <item value="If this is anything but an empty string, it will be used as a regular * expression to extract part of the input before conversion to the bean * field." />
      <item value="Defines the locale to be used for decoding the argument." />
      <item value="If not specified, the name of the column must be identical to the name * of the field." />
      <item value="A very simple CSV writer released under a commercial-friendly license." />
      <item value="word" />
      <item value="eturns a structured representation of the request path including the * context path + path within application portions, path segments with * encoded and decoded values, and path parameters." />
      <item value="andle returned from the proxy will be an actual asynchronous * {@code Future} that can be used to track the result of the asynchronous method * execution. However, since the target method needs to implement the same signature, * it will have to return a temporary {@code Future} handle that just passes a value * through: e.g. Spring's {@link AsyncResult}, EJB 3.1's {@link javax.ejb.AsyncResult}," />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="542" />
        <entry key="ENGLISH" value="543" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>