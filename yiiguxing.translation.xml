<application>
  <component name="AppStorage">
    <histories>
      <item value="Error while fetching metadata with correlation id" />
      <item value="do not continue listener invocation once a listener has failed" />
      <item value="Transition Impl" />
      <item value="Controls events of execution listener" />
      <item value="Controls events of task listener" />
      <item value="configuration" />
      <item value="Create an incident associated with this execution" />
      <item value="Returns an equivalent stream that is parallel. May return * itself, either because the stream was already parallel, or because * the underlying stream state was modified to be parallel." />
      <item value="Incident Entity" />
      <item value="get Revision Next" />
      <item value="Called when an execution is interrupted. This will remove all associated entities * such as event subscriptions, jobs, ..." />
      <item value="interrupt" />
      <item value="fire Historic Process Start Event" />
      <item value="inactivate" />
      <item value="remove all event subscriptions for this scope, if the scope has event // subscriptions" />
      <item value="removes jobs, incidents and tasks, and // clears the variable store" />
      <item value="Method used for destroying a scope in a way that the execution can be * removed afterwards" />
      <item value="indicates if this execution represents an active path of execution. * Executions are made inactive in the following situations:" />
      <item value="teapot" />
      <item value="Request Timeout" />
      <item value="Proxy Authentication Required" />
      <item value="Acceptable" />
      <item value="Note that the boundary events are not parsed during the parsing of the bpmn * activities, since the semantics are different (boundaryEvent needs to be * added as nested activity to the reference activity on PVM level)." />
      <item value="parse Boundary Events" />
      <item value="grade" />
      <item value="Indicates whether this timer is interrupting" />
      <item value="Parses a boundary timer event. The end-result will be that the given nested * activity will get the appropriate" />
      <item value="interrupting" />
      <item value="is Interrupting Timer" />
      <item value="Thorben Lindhauer" />
      <item value="Conditional" />
      <item value="Tries to evaluate the condition. If the property which is used in the condition does not exist * false will be returned." />
      <item value="hierarchy" />
      <item value="Optimistic Locking Exception" />
      <item value="create Timer Instances" />
      <item value="fire Historic Activity Instance Update" />
      <item value="create Sub Case Instance" />
      <item value="create Sub Process Instance" />
      <item value="case Execution Id" />
      <item value="Terminates the case execution identified by the given id. * Performs the transition from &lt;code&gt;ACTIVE&lt;/code&gt; to state &lt;code&gt;TERMINATED&lt;/code&gt; * if the case execution belongs to a case model or a task or a stage. * Performs the transition from &lt;code&gt;AVAILABLE&lt;/code&gt; to state &lt;code&gt;TERMINATED&lt;/code&gt; if the case * execution belongs to a milestone" />
      <item value="the id of the case execution to be terminated" />
      <item value="Suspends the process instance with the given id. This means that the * execution is stopped, so the &lt;i&gt;token state&lt;/i&gt; will not change. * However, actions that do not change token state, like setting/removing * variables, etc. will succeed" />
      <item value="If you have a process instance hierarchy, suspending * one process instance from the hierarchy will not suspend other * process instances from that hierarchy" />
      <item value="suspend Process Instance By Id" />
      <item value="In case this delegate execution is the process instance execution * and this process instance was started by a call activity, this method * returns the execution which executed the call activity in the super process instance." />
      <item value="seed" />
      <item value="iterate" />
      <item value="Returns a new {@code Collector} described by the given {@code supplier}, * {@code accumulator}, and {@code combiner} functions. The resulting * {@code Collector} has the {@code Collector.Characteristics.IDENTITY_FINISH} * characteristic." />
      <item value="of" />
      <item value="characteristics" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="667" />
        <entry key="ENGLISH" value="668" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="2" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>