<application>
  <component name="AppStorage">
    <histories>
      <item value="threshold" />
      <item value="Implements Map.remove and related methods" />
      <item value="Initializes or doubles table size. If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table" />
      <item value="Doug Lea" />
      <item value="delegate" />
      <item value="If the service state is {@link State#NEW}, this initiates service startup and returns * immediately. A stopped service may not be restarted." />
      <item value="Gwt Incompatible" />
      <item value="Indicator for transience of the value" />
      <item value="is Deserialized" />
      <item value="&lt;p&gt;Returns whether the value type is abstract. This is &lt;b&gt;not related * to the term &lt;i&gt;abstract&lt;/i&gt; in the Java language.&lt;/b&gt;&lt;/p&gt; * * Abstract value types cannot be used as types for variables but only used for querying." />
      <item value="is Primitive Value Type" />
      <item value="Indicates whether this type is primitive valued. Primitive valued types can be handled * natively by the process engine" />
      <item value="is Transient" />
      <item value="The actual value. May be null in case the value is null" />
      <item value="The type of the value. See ValueType for a list of built-in ValueTypes" />
      <item value="register To Jmx" />
      <item value="Object Name" />
      <item value="If this method successfully creates an MBean, a notification * is sent as described" />
      <item value="M Bean Server" />
      <item value="Clock" />
      <item value="delay Element" />
      <item value="assert" />
      <item value="get Variables By Key Value" />
      <item value="transient" />
      <item value="Handler type for incidents created on external task failure" />
      <item value="the maximum time to wait" />
      <item value="the time unit of the {@code timeout} argument" />
      <item value="Annotation that marks a method as a candidate for &lt;i&gt;asynchronous&lt;/i&gt; execution. * Can also be used at the type level, in which case all of the type's methods are * considered as asynchronous. Note, however, that {@code @Async} is not supported * on methods declared within a" />
      <item value="is Async" />
      <item value="Async" />
      <item value="Db Schema Create" />
      <item value="Maps the json represented by this object to a java object of the given type.&lt;br&gt; * Note: the desired target type is not validated and needs to be trusted" />
      <item value="is Var Args" />
      <item value="Set a new Number property in this node" />
      <item value="Returns an equivalent stream that is parallel. May return * itself, either because the stream was already parallel, or because * the underlying stream state was modified to be parallel" />
      <item value="Returns {@code true} if this method is a bridge" />
      <item value="the object the underlying method is invoked from" />
      <item value="spinjar" />
      <item value="Shading will break its strong encapsulation" />
      <item value="shaded" />
      <item value="flush the entity cache which inserts operations to the db operation manager" />
      <item value="Tom Baeyens" />
      <item value="merge" />
      <item value="NOTE: a proper implementation of merge() would fetch the entity from the database // and merge the state changes. For now, we simply always perform an update. // Supposedly, the &quot;proper&quot; implementation would reduce the number of situations where // optimistic locking results in a conflict." />
      <item value="Decides if an operation that failed for concurrent modifications can be tolerated, * or if {@link OptimisticLockingException} should be raised" />
      <item value="make created execution start in same activity instance" />
      <item value="is Async Before" />
      <item value="acquire Method Accessor" />
      <item value="Caller Sensitive" />
      <item value="If the method completes normally, the value it returns is * returned to the caller of invoke; if the value has a primitive * type, it is first appropriately wrapped in an object. However, * if the value has the type of an array of a primitive type, the * elements of the array are &lt;i&gt;not&lt;/i&gt; wrapped in objects; in * other words, an array of primitive type is returned. If the * underlying method return type is void, the invocation returns * null" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="746" />
        <entry key="ENGLISH" value="747" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="2" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALTESE" value="2" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SAMOAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>