<application>
  <component name="AppStorage">
    <histories>
      <item value="regex to split by comma which does a positive look ahead to ignore commas enclosed in quotes" />
      <item value="List Transformer" />
      <item value="Defines property resolution behavior on objects using the JavaBeans component architecture. This * resolver handles base objects of any type, as long as the base is not null. It accepts any object * as a property, and coerces it to a string. That string is then used to find a JavaBeans compliant * property on the base object. The value is accessed using JavaBeans getters and setters. This * resolver can be constructed in read-only mode, which means that isReadOnly will always return * true and {@link #setValue(ELContext, Object, Object, Object)} will always throw * PropertyNotWritableException. ELResolvers are combined together using {@link CompositeELResolver} * s, to define rich semantics for evaluating an expression. See the javadocs for {@link ELResolver} * for details. Because this resolver handles base objects of any type, it should be placed near the * end of a composite resolver. Otherwise, it will claim to have resolved a property before any * resolvers that come after it get a chance to test if they can do so as well." />
      <item value="A script which is provided as source code" />
      <item value="evaluate" />
      <item value="ScriptEngine that used JUEL for script evaluation and compilation (JSR-223)." />
      <item value="Bindings implementation using an {@link ExecutionImpl} as 'back-end'" />
      <item value="Returns a cached script engine or creates a new script engine if no such engine is currently cached" />
      <item value="Primitive Value" />
      <item value="decrypt" />
      <item value="Static factory methods for {@link BodyInserter} implementations." />
      <item value="A function that can extract data from a {@link ReactiveHttpInputMessage} body." />
      <item value="A combination of functions that can populate a {@link ReactiveHttpOutputMessage} body." />
      <item value="@deprecated {@code SSLSocketFactory} does not expose its {@link X509TrustManager}, which is * a field that OkHttp needs to build a clean certificate chain. This method instead must * use reflection to extract the trust manager. Applications should prefer to call {@link * #sslSocketFactory(SSLSocketFactory, X509TrustManager)}, which avoids such reflection." />
      <item value="Public constant media type for" />
      <item value="GatewayFilter that modifies the request body" />
      <item value="This filter blocks the request, if the request size is more than the permissible size. * The default request size is 5 MB." />
      <item value="PAYMENT REQUIRED" />
      <item value="PROXY AUTHENTICATION REQUIRED" />
      <item value="PRECONDITION FAILED" />
      <item value="EXPECTATION FAILED" />
      <item value="INSUFFICIENT SPACE ON RESOURCE" />
      <item value="DESTINATION LOCKED" />
      <item value="UNPROCESSABLE ENTITY" />
      <item value="when used in pipeline / transaction." />
      <item value="Reactive Redis operations for simple (or in Redis terminology 'string') values." />
      <item value="Items to be included in the trace. Defaults to request headers (excluding * Authorization but including Cookie), response headers (including Set-Cookie), and * time taken." />
      <item value="Principal associated with an HTTP request-response exchange" />
      <item value="time Taken" />
      <item value="Flag to say that the repository lists traces in reverse order" />
      <item value="Trace" />
      <item value="In Memory Http Trace Repository" />
      <item value="Convert the Map to JSON" />
      <item value="decode" />
      <item value="signer for signing using an RSA private key" />
      <item value="Utility that generates a random-value ASCII string." />
      <item value="Helper that translates between JWT encoded token values and OAuth authentication * information (in both directions). Also acts as a {@link TokenEnhancer} when tokens are * granted." />
      <item value="Attempt to run as a different user" />
      <item value="@return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;RunAsManager&lt;/code&gt; can support the passed * configuration attribute" />
      <item value="Attempt authorization" />
      <item value="Indicates whether this &lt;code&gt;RunAsManager&lt;/code&gt; is able to process the passed * &lt;code&gt;ConfigAttribute&lt;/code&gt;. * &lt;p&gt; * This allows the &lt;code&gt;AbstractSecurityInterceptor&lt;/code&gt; to check every * configuration attribute can be consumed by the configured * &lt;code&gt;AccessDecisionManager&lt;/code&gt; and/or &lt;code&gt;RunAsManager&lt;/code&gt; and/or * &lt;code&gt;AfterInvocationManager&lt;/code&gt;. * &lt;/p&gt;" />
      <item value="Allows providing defaults for" />
      <item value="* Provides integration with the Servlet 3 APIs in addition to the ones found in * {@link HttpServlet25RequestFactory}. The additional methods that are integrated with * can be found below:" />
      <item value="Role prefix must not be null" />
      <item value="A &lt;code&gt;Filter&lt;/code&gt; which populates the &lt;code&gt;ServletRequest&lt;/code&gt; with a request * wrapper which implements the servlet API security methods." />
      <item value="Standard implementation of {@code SecurityFilterChain}." />
      <item value="Commences an authentication scheme. * &lt;p&gt; * &lt;code&gt;ExceptionTranslationFilter&lt;/code&gt; will populate the &lt;code&gt;HttpSession&lt;/code&gt; * attribute named * &lt;code&gt;AbstractAuthenticationProcessingFilter.SPRING_SECURITY_SAVED_REQUEST_KEY&lt;/code&gt; * with the requested target URL before calling this method. * &lt;p&gt; * Implementations should modify the headers on the &lt;code&gt;ServletResponse&lt;/code&gt; as * necessary to commence the authentication process." />
      <item value="Used by {@link ExceptionTranslationFilter} to commence an authentication scheme." />
      <item value="Processes a HTTP request's BASIC authorization headers, putting the result into the * &lt;code&gt;SecurityContextHolder&lt;/code&gt;." />
      <item value="If the {@link SecurityConfigurer} has already been specified get the original, * otherwise apply the new {@link SecurityConfigurerAdapter}." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="376" />
        <entry key="ENGLISH" value="377" />
        <entry key="IRISH" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="GALICIAN" value="3" />
        <entry key="LATIN" value="2" />
        <entry key="ROMANIAN" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>